import sys, os
import binascii
import argparse

def parse_args():
    parser = argparse.ArgumentParser(description='Convert tflite to c or cpp file')
   
    parser.add_argument('--input', help='input tflite file')
    parser.add_argument('--model_name', help='model name')
    parser.add_argument('--cpp', action='store_true', default=True, help='output cpp file')
    
    
    args = parser.parse_args()

    return args

if __name__ == '__main__':
    
    args = parse_args()
    
    input = args.input
    model_name = args.model_name
    
    if not os.path.exists(input):
        print('input file not exist')
        sys.exit(1)
    
    if input.endswith('.tflite') == False:
        print('input file is not tflite')
        sys.exit(1)
    
    output_h = input.replace('.tflite', '_model_data.h')
    
    if args.cpp:
        output_c = input.replace('.tflite', '_model_data.cpp')
    else:
        output_c = input.replace('.tflite', '_model_data.c')
    
    
    if model_name == None:
        model_name = input.split('/')[-1].split('.')[0]
        
    with open(input, 'rb') as f_input:
        data = f_input.read()
        
        
        if data[4:8] != b'TFL3':
            print('input file is not tflite')
            sys.exit(1)
        
        data = binascii.hexlify(data)
        data = data.decode('utf-8')
        
    
        
        with open(output_h, 'w') as f_output_h:
            f_output_h.write('#ifndef __%s_MODEL_DATA_H__\r\n' % model_name.upper())
            f_output_h.write('#define __%s_MODEL_DATA_H__\r\n' % model_name.upper())
            f_output_h.write('\r\n//this file is generated by tflite2c.py\r\n')
            f_output_h.write('\r\n#include <stdint.h>\r\n')
            f_output_h.write('extern const unsigned char g_%s_model_data[];\r\n' % model_name)
            f_output_h.write('extern const unsigned int g_%s_model_data_len;\r\n' % model_name)
            f_output_h.write('\r\n#endif\r\n')
            f_output_h.close()
        
        
        with open(output_c, 'w') as f_output_c:
            f_output_c.write('#include <stdint.h>\r\n')
            f_output_c.write('\r\n#include "%s_model_data.h"\r\n\r\n' % model_name)
            f_output_c.write('const unsigned char g_%s_model_data[] = {\r\n' % model_name)
            for i in range(0, len(data), 2):
                f_output_c.write('0x')
                f_output_c.write(data[i])
                f_output_c.write(data[i+1])
                f_output_c.write(', ')
                if i % 36 == 34:
                    f_output_c.write('\r\n')
            f_output_c.write('};\r\n\r\n')
            f_output_c.write('const unsigned int g_%s_model_data_len = %d;\r\n' % (model_name, len(data) // 2))
            f_output_c.close()
        f_input.close()
    
    
        
        